./a.out
2: int -> INT
2: main -> ID
2: ( -> OPEN_PARENTHESES
2: ) -> CLOSE_PARENTHESES
2: { -> OPEN_KEYS
3: int -> INT
3: x -> ID
3: , -> COMMA
3: y -> ID
3: , -> COMMA
3: result -> ID
3: ; -> SEMICOLON
4: scanf -> SCANF
4: ( -> OPEN_PARENTHESES
4: "%d %d" -> STRING
4: , -> COMMA
4: & -> ADDRESS
4: x -> ID
4: , -> COMMA
4: & -> ADDRESS
4: y -> ID
4: ) -> CLOSE_PARENTHESES
4: ; -> SEMICOLON
5: result -> ID
5: = -> ASSIGNMENT
5: x -> ID
5: + -> PLUS
5: y -> ID
5: ; -> SEMICOLON
6: result -> ID
6: = -> ASSIGNMENT
6: result -> ID
6: / -> OVER
6: 4 -> INT_NUMBER
6: ; -> SEMICOLON
7: result -> ID
7: = -> ASSIGNMENT
7: ( -> OPEN_PARENTHESES
7: 5 -> INT_NUMBER
7: * -> TIMES
7: 8 -> INT_NUMBER
7: ) -> CLOSE_PARENTHESES
7: / -> OVER
7: 6 -> INT_NUMBER
7: ; -> SEMICOLON
8: printf -> PRINTF
8: ( -> OPEN_PARENTHESES
8: "%d %d" -> STRING
8: , -> COMMA
8: x -> ID
8: , -> COMMA
8: y -> ID
8: ) -> CLOSE_PARENTHESES
8: ; -> SEMICOLON
9: result -> ID
9: ++ -> INCREMENT
9: ; -> SEMICOLON
10: return -> RETURN
10: 0 -> INT_NUMBER
10: ; -> SEMICOLON
11: } -> CLOSE_KEYS
